// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//  id    Int     @id @default(autoincrement())
//  name  String  @unique
//  posts Post[]
//}

//model Post {
//  id        Int     @id @default(autoincrement())
//  title     String
//  published Boolean @default(true)
//  authorId  Int
//  author    User    @relation(fields: [authorId], references: [id])
//}

// 1-1
// model User {
//   id Int @id @default(autoincrement())
//   profile Profile?
// }

// model Profile {
//   id Int @id @default(autoincrement())
//   user User @relation(fields: [userId], references: [id])
//   userId Int @unique
// }

// 1-n
// model User {
//   id Int @id @default(autoincrement())
//   posts Post[]
// }

// model Post {
//   id Int @id @default(autoincrement())
//   author User @relation(fields: [authorId], references: [id])
//   authorId Int
// }

// m-n explicit
model Post {
  id Int @id @default(autoincrement())
  title String
  categories CategoriesOnPosts[]
}

model Category {
  id Int @id @default(autoincrement())
  name String
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post Post @relation(fields: [postId], references: [id])
  postId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String
  @@id([postId, categoryId])
}

// m-n implicit
// model Post {
//   id Int @id @default(autoincrement())
//   title String
//   categories Category[]
// }

// model Category {
//   id Int @id @default(autoincrement())
//   name String
//   posts Post[]
// }